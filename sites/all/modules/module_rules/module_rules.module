<?php
// $Id: module_rules.module,v 1.21.2.9 2008/06/02 17:12:55 hass Exp $

/**
 * @file
 * Allows you to define module_rules of your site and apply themes to those module_rules.
 */

/**
 * Implementation of hook_help().
 */
function module_rules_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Allows you to define module_rules of your site and apply themes to those module_rules.');
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function module_rules_perm() {
  return array('administer module_rules');
}

/**
 * Implementation of hook_menu().
 */
function module_rules_menu() {
  $access = array('administer module_rules');

  $items['admin/build/module_rules'] = array(
    'title' => 'module_rules',
    'description' => 'Define rules for the modules of your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('module_rules_admin_display_form'),
    'access arguments' => $access,
    'file' => 'module_rules.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/build/module_rules/list'] = array(
    'title' => 'List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('module_rules_admin_display_form'),
    'access arguments' => $access,
    'weight' => -10,
    'file' => 'module_rules.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/build/module_rules/add'] = array(
    'title' => 'Add module rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('module_rules_admin_settings_form'),
    'access arguments' => $access,
    'file' => 'module_rules.admin.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/build/module_rules/edit/%section'] = array(
    'title' => 'Edit section',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('module_rules_admin_settings_form', 4),
    'access arguments' => $access,
    'file' => 'module_rules.admin.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/build/module_rules/delete/%section'] = array(
    'title' => 'Delete section',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('module_rules_delete_form', 4),
    'access arguments' => $access,
    'file' => 'module_rules.admin.inc',
    'type' => MENU_CALLBACK
  );
  
  return $items;
}


/**
 * Implementation of hook_init().
 */
function module_rules_init() {

  if ($section = _module_rules_verify()) {
    // only switch to custom theme if theme is active, to prohibit a destroyed site
    foreach (list_themes() as $key => $theme) {
      if ($theme->status == 1 && $theme->name == $section->theme) {
        global $custom_theme;
        $custom_theme = $section->theme;
      }
    }
  }

}

/**
 * Implementation of hook_theme()
 */
function module_rules_theme() {
  return array(
    'module_rules_admin_display_form' => array(
      'file' => 'module_rules.admin.inc',
      'arguments' => array('form' => NULL),
    ),
  );
}


/**
 * Menu helper function to verify if section exists.
 */
function section_load($section) {
  return db_fetch_object(db_query("SELECT * FROM {module_rules_data} WHERE sid = %d", $section));
}

/**
 * An API for modules that want to know about module_rules.
 *
 * This API is a function that lets you find out about settings.
 *
 * @param
 *  Optional $setting a string containing the section you wnat to test against.
 *
 * @return
 *   Depends on the parameter.
 *   If you do not give $section, it will return the section object, if found.
 *   If you give $section, it will return TRUE if you are in that section
 *   Otherwise it will return FALSE
 */
function _module_rules_verify() {
  global $user;

	$output = array();

	if (isset($user->roles) && is_array($user->roles)) {
	    // Caller wants to know in which section she is.
	    $rids = array_keys($user->roles);
	}

	$res = db_query(db_rewrite_sql('
SELECT 
		DISTINCT s.*
FROM 		{module_rules_data} s 
LEFT JOIN 	{module_rules_roles} r ON r.sid = s.sid AND (r.rid IN ('. db_placeholders($rids) .') OR r.rid IS NULL)
WHERE 		s.status = 1 
ORDER BY 	s.weight
', 's', 'sid'), $rids);

    while ($row = db_fetch_object($res)) {
	$output[$row->name] = true;


      if ($row->visibility < 2) {

	$path = ltrim(getenv('redirect_url'), '/');

	if ($path == "")
		$path = "/";

        // Compare with the internal and path alias (if any).
        $page_match = pete_match_path($path, $row->path);
        if (array_key_exists('q', $_GET) && $path != $path) {
          $page_match = $page_match || pete_match_path($path, $row->path);
        }
        // When $row->visibility has a value of 0, the block is displayed on
        // all pages except those listed in $row->path. When set to 1, it
        // is displayed only on those pages listed in $row->path.
        if ($page_match = !($row->visibility xor $page_match)) {
		unset($output[$row->name]);
        } else {
	}
      }
      else {
        if (drupal_eval($row->path)) {
		unset($output[$row->name]);
        }
      }


//	if ($row->hasRole == 0)
//		$output[$row->name] = true;
  }


if (isset($_GET['q']) && ($_GET['q'] == "services/xmlrpc")) {        
	$output['securesite'] = true;
}

  return $output;
}

/**
 * Add template suggestion for page templates.
 */
function module_rules_preprocess_page(&$variables) {
  // Add multiple suggestions.
  if ($section = _module_rules_verify()) {
    // Try to find a page template with section id.
    $variables['template_files'][] = 'module_rules-page-'. $section->sid;

    // Try to find a page template named like the section.
    $filter = '![^abcdefghijklmnopqrstuvwxyz0-9-_]+!s';
    $string_clean = preg_replace($filter, '-', drupal_strtolower($section->name));
    $variables['template_files'][] = 'module_rules-page-'. $string_clean;
  }
}



function pete_match_path($path, $patterns) {
  static $regexps;

  if (!isset($regexps[$patterns])) {
    $regexps[$patterns] = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($patterns, '/')) .')$/';
  }
  return preg_match($regexps[$patterns], $path);   
}

