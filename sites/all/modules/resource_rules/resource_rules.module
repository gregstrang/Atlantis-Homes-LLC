<?php
// $Id: resource_rules.module,v 1.21.2.9 2008/06/02 17:12:55 hass Exp $

/**
 * @file
 * Allows you to define resource_rules of your site and apply themes to those resource_rules.
 */

/**
 * Implementation of hook_help().
 */
function resource_rules_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Allows you to define resource_rules of your site and apply themes to those resource_rules.');
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function resource_rules_perm() {
  return array('administer resource rules');
}

/**
 * Implementation of hook_menu().
 */
function resource_rules_menu() {
  $access = array('administer resource rules');

  $items['admin/build/resource_rules'] = array(
    'title' => 'Resource Rules',
    'description' => 'Define rules for the modules of your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resource_rules_admin_display_form'),
    'access arguments' => $access,
    'file' => 'resource_rules.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/build/resource_rules/list'] = array(
    'title' => 'List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resource_rules_admin_display_form'),
    'access arguments' => $access,
    'weight' => -10,
    'file' => 'resource_rules.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/build/resource_rules/add'] = array(
    'title' => 'Add resource rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resource_rules_admin_settings_form'),
    'access arguments' => $access,
    'file' => 'resource_rules.admin.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/build/resource_rules/edit/%resource_rules'] = array(
    'title' => 'Edit resource rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resource_rules_admin_settings_form', 4),
    'access arguments' => $access,
    'file' => 'resource_rules.admin.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/build/resource_rules/delete/%resource_rules'] = array(
    'title' => 'Delete section',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resource_rules_delete_form', 4),
    'access arguments' => $access,
    'file' => 'resource_rules.admin.inc',
    'type' => MENU_CALLBACK
  );
  
  return $items;
}


/**
 * Implementation of hook_init().
 */
function resource_rules_footer() {

}

/**
 * Implementation of hook_theme()
 */
function resource_rules_theme() {
  return array(
    'resource_rules_admin_display_form' => array(
      'file' => 'resource_rules.admin.inc',
      'arguments' => array('form' => NULL),
    ),
  );
}



/**
 * An API for modules that want to know about resource_rules.
 *
 * This API is a function that lets you find out about settings.
 *
 * @param
 *  Optional $setting a string containing the section you wnat to test against.
 *
 * @return
 *   Depends on the parameter.
 *   If you do not give $section, it will return the section object, if found.
 *   If you give $section, it will return TRUE if you are in that section
 *   Otherwise it will return FALSE
 */
function _resource_rules_verify($reset = false) {
	static $return; 

	if (isset($return) && !$reset)
		return $return;
	
	global $user;

	$return = array();

	if (isset($user->roles) && is_array($user->roles)) {
	    // Caller wants to know in which section she is.
	    $rids = array_keys($user->roles);
	}

	$res = db_query(db_rewrite_sql('
		SELECT 
		DISTINCT s.*
		FROM 		{resource_rules_data} s 
		LEFT JOIN 	{resource_rules_roles} r ON r.sid = s.sid AND (r.rid IN ('. db_placeholders($rids) .') OR r.rid IS NULL)
		WHERE 		s.status = 1 
		ORDER BY 	s.weight
		', 's', 'sid'), $rids);

    while ($row = db_fetch_object($res)) {
	$return[$row->name] = true;

      if ($row->visibility < 2) {

	$path = drupal_get_path_alias($_GET['q']);

	if ($path == "")
		$path = "/";

        // Compare with the internal and path alias (if any).
        $page_match = resource_rules_match_path($path, $row->path);
	$page_match = drupal_match_path($path, $row->path);
        if (array_key_exists('q', $_GET) && $path != $path) {
          $page_match = $page_match || resource_rules_match_path($path, $row->path);
        }
        // When $row->visibility has a value of 0, the block is displayed on
        // all pages except those listed in $row->path. When set to 1, it
        // is displayed only on those pages listed in $row->path.
        if ($page_match = !($row->visibility xor $page_match)) {
        } else {
		$return[$row->name] = false;
//		unset($return[$row->name]);
	}
      }
      else {
        if (drupal_eval($row->path)) {
		$return[$row->name] = false;
//		unset($return[$row->name]);
        }
      }
  }

  return $return;
}

/**
 * Add template suggestion for page templates.
 */
function resource_rules_preprocess_page(&$variables) {
  // Add multiple suggestions.
  if ($section = _resource_rules_verify()) {
    // Try to find a page template with section id.
    $variables['template_files'][] = 'resource_rules-page-'. $section->sid;

    // Try to find a page template named like the section.
    $filter = '![^abcdefghijklmnopqrstuvwxyz0-9-_]+!s';
    $string_clean = preg_replace($filter, '-', drupal_strtolower($section->name));
    $variables['template_files'][] = 'resource_rules-page-'. $string_clean;
  }
}


function resource_rules_add_visible_resources() {
	global $theme_path;

	if (!isset($theme_path))
		return;

	$resource_files = _resource_rules_verify();
	if (is_array($resource_files)) {
		foreach ($resource_files AS $resource_file => $is_activate) {
			if ($is_activate !== false) {
				global $allowResourceAdd;
				$allowResourceAdd = true;
				if (strpos($resource_file, ".css")) {
					drupal_add_css( $theme_path . "/" . $resource_file);
				}
				elseif (strpos($resource_file, ".js")) {
					drupal_add_js( $theme_path . "/" . $resource_file);
				}
				$allowResourceAdd = false;
			}
		}
	}
}


function resource_rules_match_path($path, $patterns) {
  static $regexps;

  if (!isset($regexps[$patterns])) {
    $regexps[$patterns] = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($patterns, '/')) .')$/';
  }

  $result = preg_match($regexps[$patterns], $path);   

  return $result;
}



function resource_rules_preprocess(&$variables) {
  resource_rules_add_visible_resources();
}


/**
 * Menu helper function to verify if section exists.
*/
function resource_rules_load($section) {
  return db_fetch_object(db_query("SELECT * FROM {resource_rules_data} WHERE sid = %d", $section));
}


function resource_rules_add_resource($resource_type, $a1 = null, $a2 = null, $a3 = null, $a4 = null, $a5 = null, $a6 = null ) {
	global $allowResourceAdd;
	if ($allowResourceAdd)
		return true;

	$resource_files = _resource_rules_verify();
	
	if (is_array($resource_files)) {
		foreach ($resource_files AS $resource_file => $is_activate) {
			if (!$is_activate) {
				if (strpos($a1, $resource_file)) {
					return false;
				}
			}
		}
	}
}

