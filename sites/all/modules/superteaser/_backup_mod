<?php
/* $Id: superteaser.module,v 1.2 2006/06/10 15:14:42 alexreisner Exp $ */

/**
 * @file
 * This module increases control of the length and readibility of teasers.
 * Truncating algorithms are pitted against each other and the best result
 * for a particular text is chosen.
 */

/**
 * Get a teaser for a node.
 *
 * Use this function instead of node_teaser() for more specific control
 * over length and to generate teasers on load rather than save (allows
 * auto-teaser to change as body changes).
 *
 * @param object $node
 * @param int $length
 *   Target length, in characters.
 * @param string $fuzzy
 *   'shorter' : if not exact, text will be shorter than $length
 *   'longer'  : if not exact, text will be longer than $length
 *   else      : best of 'shorter' and 'longer' will be used
 * @return string
 */
function superteaser($node, $length = 100, $fuzzy = NULL) {

  if ($node->teaser) { return $node->teaser; } // if manually specified

  $body = $node->body;
  $format = $node->format;

  // Filter text before deciding how long it is.

  // We check for the presence of the PHP evaluator filter in the current
  // format. If the body contains PHP code, we do not split it up to prevent
  // parse errors.
  if (isset($format)) {
    $filters = filter_list_format($format);
    if (isset($filters['filter/1']) && strpos($body, '<?') !== false) {
      return $body;
    }
  }

  // If the body is shorter than the desired length, use the whole thing.
  if ($length >= strlen($body)) {
    return $body;
  }

  // Get chopping algorithms and sort so more desirable ones take precedence.
  $algorithms = _superteaser_get_algorithms();
  asort($algorithms);

  // Adjust teaser length based on amount of text which is HTML tags.
  $html = _superteaser_percent_chars_tags($body, 0, $length);
  $length += intval($length * $html);

  // Run each algorithm and give the result a score.
  $best_score = 1000;
  foreach ($algorithms as $func => $value) {
    $text = call_user_func('_'.$func, $body, $length, $fuzzy);
    if (strlen($text) == 0) { continue; }
    $score = abs($length - strlen($text)) - $value;
    if ($score <= $best_score && strlen($text) > 0) { // lowest score is best
      $best_score = $score;
      $best_text = $text;
    }
  }
  $best_text = superteaser_remove_cut_off_tags($best_text);
  return superteaser_close_tags($best_text);
}

/**
 * Modify the database when upgrading from 4.6 to 4.7.
 */
function superteaser_update_1() {
  $algorithms = variable_get('superteaser_algorithms', array());
  foreach ($algorithms as $name => $value) {
    variable_set(substr($name, 1), $value);
  }
  variable_del('superteaser_algorithms');
}

/**
 * Get the list of chopping algorithms and their stored values.
 * An algorithm's value is the number of characters you're willing to miss
 * the targe length by for the type of break provided.
 *
 * @return array
 */
function _superteaser_get_algorithms() {
  $algorithms = array(
    'superteaser_truncate_at_break'     =>  180,
    'superteaser_truncate_at_paragraph' =>  100,
    'superteaser_truncate_at_sentence'  =>   80,
    'superteaser_truncate_at_space'     =>   10,
    'superteaser_truncate_exact'        =>  -50,
  );
  foreach ($algorithms as $name => $default) {
    $algorithms[$name] = variable_get($name, $default);
  }
  return $algorithms;
}

/**
 * Get the stored "fuzzy" setting (longer/shorter/best).
 *
 * @return string
 */
function _superteaser_get_fuzzy() {
  return variable_get('superteaser_fuzzy', 'best');
}

/**
 * Get the stored explicit text break string.
 *
 * @return string
 */
function _superteaser_get_break() {
  return variable_get('superteaser_break', '<!--break-->');
}

/**
 * Get the percentage of characters which make up HTML tags.
 *
 * @param string $text
 * @param int $offset
 *   Where to start looking at the string. Like 2nd param of substr().
 * @param int $length
 *   How many chars to look at from $offset. Like 3rd param of substr().
 * @return float
 */
function _superteaser_percent_chars_tags($text, $offset = 0, $length = null) {
  $text = $length === null ?
    substr($text, $offset) : substr($text, $offset, $length);
  if (!strlen($text)) { return 0; }
  $htmls = 0;
  $open = 0;
  while (($open = strpos($text, '<', $open)) !== false) {
    $close = strpos($text, '>', $open);

    // Handle unclosed tag at end of text.
    if ($close === false) {
      $close = strlen($text) - 1;
    }

    $htmls += $close - $open + 1;
    $open = $close + 1;
  }
  return $htmls / strlen($text);
}

/**
 * Truncate text at the nearest explicit breakpoint.
 *
 * @param string $text
 * @param int $length
 * @param string $fuzzy
 *   'shorter' : if not exact, text will be shorter than $length
 *   'longer'  : if not exact, text will be longer than $length
 *   else      : best of 'shorter' and 'longer' will be chosen
 * @return string
 */
function _superteaser_truncate_at_break($text, $length, $fuzzy = NULL) {
  $breakpoints = array(_superteaser_get_break() => 0);
  return _superteaser_truncate_at_points($text, $length, $breakpoints, $fuzzy);
}

/**
 * Truncate text at a space.
 *
 * @param string $text
 * @param int $length
 * @param string $fuzzy
 *   'shorter' : if not exact, text will be shorter than $length
 *   'longer'  : if not exact, text will be longer than $length
 *   else      : best of 'shorter' and 'longer' will be chosen
 * @return string
 */
function _superteaser_truncate_at_space($text, $length, $fuzzy = NULL) {
  $breakpoints = array(' ' => 0);
  return _superteaser_truncate_at_points($text, $length, $breakpoints, $fuzzy);
}

/**
 * Truncate text to an exact length.
 *
 * @param string $text
 * @param int $length
 * @param string $fuzzy
 *   Just a placeholder parameter.
 * @return string
 */
function _superteaser_truncate_exact($text, $length, $fuzzy = NULL) {
  return truncate_utf8($text, $length);
}

/**
 * Truncate text at the end of a paragraph (or list).
 *
 * @param string $text
 * @param int $length
 * @param string $fuzzy
 *   'shorter' : if not exact, text will be shorter than $length
 *   'longer'  : if not exact, text will be longer than $length
 *   else      : best of 'shorter' and 'longer' will be chosen
 * @return string
 */
function _superteaser_truncate_at_paragraph($text, $length, $fuzzy = NULL) {
  $breakpoints = array(
    "\n"     => 0,
    "</p>"   => 4,
    "<p>"    => 0,
    "<br>"   => 4,
    "<br/>"  => 5,
    "<br />" => 6,
    "</ul>"  => 5,
    "</ol>"  => 5,
  );
  return _superteaser_truncate_at_points($text, $length, $breakpoints, $fuzzy);
}

/**
 * Truncate text at the end of a sentence (or list item).
 *
 * @param string $text
 * @param int $length
 * @param string $fuzzy
 *   'shorter' : if not exact, text will be shorter than $length
 *   'longer'  : if not exact, text will be longer than $length
 *   else      : best of 'shorter' and 'longer' will be chosen
 * @return string
 */
function _superteaser_truncate_at_sentence($text, $length, $fuzzy = NULL) {
  $breakpoints = array(
    '. '  => 1,
    '! '  => 1,
    '? '  => 1,
    '.<'  => 1,
    '!<'  => 1,
    '?<'  => 1,
    '." ' => 2,
    '!" ' => 2,
    '?" ' => 2,
    '<li>' => 0,
    '</li>' => 5,
  );
  return _superteaser_truncate_at_points($text, $length, $breakpoints, $fuzzy);
}

/**
 * Truncate text at any of various specified points.
 *
 * @param string $text
 * @param int $length
 * @param array $breakpoints
 *   Arrary of possible breakpoints in format:
 *   array(
 *     ". "  => 1,
 *     ".\n" => 1,
 *     ".\"" => 2,
 *   )
 *   Keys are breakpoints, values are number of chars to preserve.
 * @param string $fuzzy
 *   'shorter' : If not exact, text will be shorter than $length.
 *   'longer'  : If not exact, text will be longer than $length.
 *   else      : Best of 'shorter' and 'longer' will be chosen.
 *   Note that 'shorter' or the default may result in an empty teaser.
 * @param bool $case
 *   Case insensitive breakpoint match? Default false.
 * @return string
 */
function _superteaser_truncate_at_points($text, $length, $breakpoints, $fuzzy = NULL, $case = false) {
  if (!$case) {
    $orig_text = $text;
    $text = strtolower($text);
    foreach ($breakpoints as $key => $b) {
      $breakpoints[$key] = strtolower($b);
    }
  }
  if ($length > strlen($text)) {
    $length = strlen($text);
  }

  // Longer.
  if ($fuzzy == 'longer') {
    $pos = strlen($text);
    foreach ($breakpoints as $b => $l) {
      $new = strpos($text, $b, $length);
      if ($new >= $length && $new < $pos) {
        $pos = $new;
        $len = $l; // preserve breakpoint's good chars
      }
    }
    $text = substr($text, 0, $pos + $len);
  }

  // Shorter.
  else if ($fuzzy == 'shorter') {
    $text = strrev(substr($text, 0, $length));
    $pos = $length;
    foreach ($breakpoints as $b => $l) {
      $new = strpos($text, strrev($b));
      if ($new && $new < $pos) {
        $pos = $new;
        $len = strlen($b) - $l; // cut off breakpoint's bad chars
      }
    }
    $text = strrev(substr($text, $pos + $len));
  }

  // Best of 'shorter' and 'longer' (closest to desired length).
  else {
    $s = _superteaser_truncate_at_points($text, $length, $breakpoints, 'shorter');
    $l = _superteaser_truncate_at_points($text, $length, $breakpoints, 'longer');
    $text = $length - strlen($s) < strlen($l) - $length ? $s : $l;
  }

  if (!$case) {
    $text = substr($orig_text, 0, strlen($text));
  }
  return $text;
}

/**
 * Remove an unfinished HTML tags from the end of a teaser.
 *
 * @param string $text
 * @return string
 */
function superteaser_remove_cut_off_tags($text) {
  return preg_replace('|<[^>]*$|', '', $text);
}

/**
 * Close all open HTML tags in a teaser.
 * Note this will not fix text with too many closing tags.
 *
 * @param string $text
 * @param array $ok_open
 *   Array of tags which may be left open (optional).
 * @return string
 */
function superteaser_close_tags($text, $ok_open = null) {

  // Default list tags which may be left open.
  if ($ok_open === null) {
    $ok_open = array(
      'img',
      'li',
      'br',
    );
  }

  preg_match_all('|<\s*(\w+)( [^>]*[^/])?>|', $text, $open);
  preg_match_all('|<\s*/(\w[^> ]*)>|', $text, $close);
  $open = $open[1]; $close = $close[1];
  if (count($open) != count($close)) {
    foreach ($open as $i => $o) {
      if (($j = array_search($o, $close)) !== FALSE) {
        unset($open[$i], $close[$j]);
      }
      else if (array_search($o, $ok_open) !== FALSE) {
        unset($open[$i]);
      }
    }
    if (count($open)) {
      while ($o = array_pop($open)) {
        $text .= "</$o>";
      }
    }
  }
  return $text;
}

/**
 * Implementation of hook_help.
 */
function superteaser_help($section) {
  switch ($section) {
    case 'admin/settings/superteaser':
      return t('<p>In order to make teasers readable, they may not be the exact length you specify. Instead, text is truncated at a point chosen for optimal readability. 
Set the number of characters by which you are willing to miss the target length for each kind of break point below.</p><p>The !link is !len characters.</p>',
        array(
          '!link' => l(t('current teaser length'), 'admin/content/node-settings'),
          '!len' => variable_get('teaser_length', 600)
        )
      );
  }
}

/**
 * Implementation of hook_menu.
 */
function superteaser_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/superteaser',
      'title' => t('Superteaser'),
      'access' => user_access('administer nodes'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('superteaser_settings'),
    );
  }
  return $items;
}

/**
 * Implementation of hook_settings.
 */
function superteaser_settings() {
  $labels = array(
    'superteaser_truncate_at_break'     =>  t('Explicit break, if found'),
    'superteaser_truncate_at_paragraph' =>  t('End of paragraph'),
    'superteaser_truncate_at_sentence'  =>  t('End of sentence'),
    'superteaser_truncate_at_space'     =>  t('Between words'),
    'superteaser_truncate_exact'        =>  t('Mid-word'),
  );
  $algorithms = _superteaser_get_algorithms();
  arsort($algorithms);

  // Algorithm value fields.
  $form['superteaser_algorithms'] = array(
    '#type' => 'fieldset',
    '#title' => 'Break Point Values',
    '#collapsible' => true,
    '#collapsed' => false,
  );
  foreach ($algorithms as $name => $value) {
    $form['superteaser_algorithms'][$name] = array(
      '#type' => 'textfield',
      '#title' => $labels[$name],
      '#default_value' => $value,
      '#size' => 6,
      '#maxlength' => 5,
    );
  }

  // Break tag field.
  $break = _superteaser_get_break();
  $form['superteaser_break'] = array(
    '#type' => 'textfield',
    '#title' => t('Explicit break string'),
    '#default_value' => $break,
    '#size' => 12,
    '#maxlength' => 50,
  );

  // Fuzzy field.
  $fuzzy = _superteaser_get_fuzzy();
  $options = array(
    'longer'  => t('Longer than target length'),
    'shorter' => t('Shorter than target length'),
    'best'    => t('Whichever is closest to target length'),
  );
  $form['superteaser_fuzzy'] = array(
    '#type' => 'radios',
    '#title' => t('Teaser length preference, if not exact'),
    '#options' => $options,
    '#default_value' => $fuzzy,
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_nodeapi.
 */
function superteaser_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) { 
  switch ($op) {
    case 'submit':
      if (!$node->teaser) {
        $node->teaser = superteaser($node, variable_get('teaser_length', 600),
          _superteaser_get_fuzzy());
      }
      break;
  }
}

?>

