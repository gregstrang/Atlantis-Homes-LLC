<?php

/**
 * Implementation of hook_form_alter(). Menu Settings for Content Type.
 */
function inclind_ctm_form_alter(&$form, $form_state, $form_id) {
	// Menu Setting for content types - Content Type Form
	if ($form_id == 'node_type_form') {
		$form['menu_settings'] = array(
		'#type' => 'fieldset',
		'#title' => t('Menu Settings'),
		'#description' => t('Enable Menu Settings for this content type.'),
		'#collapsible' => TRUE,
	);

	$default_values = variable_get($form['#node_type']->type.'_menu_settings', array());

	//$default_values = $default_values ? $default_values : array();
	$options = menu_get_menus();
	$form['menu_settings']['menu_settings'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Enable the Menus you want to be available for this Content Type'),
		'#default_value' => $default_values,
		'#options' => $options,
	);

	$form['menu_settings']['hide_menu_form'] = array(
		'#type' => 'checkbox',
		'#title' => t('Hide content of this type in the menu parent form'),
		'#default_value' => variable_get($form['#node_type']->type.'_hide_menu_form', 0),
	);
	$form['#submit'][] = 'inclind_ctm_node_type_form_submit';

	// inclind
	$item = $form['#node']->menu;

	// Generate a list of possible parents (not including this item or descendants).
	$options = menu_parent_options(menu_get_menus(), $item);
	$default = variable_get($form['#node_type']->type.'_menu_parent', NULL);
	if (!isset($options[$default])) {
		$default = 'primary-links:0';
	}
	$form['menu_settings']['menu_parent'] = array(
		'#type' => 'select',
		'#title' => t('Default parent item'),
		'#default_value' => $default,
		'#options' => $options,
		'#description' => t('Choose the default parent menu item for nodes of this type to go under.'),
		'#attributes' => array('class' => 'menu-title-select'),
	);
	$form['#submit'][] = 'menu_node_form_submit';
} elseif (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id) {
// Menu Settings for Node Edit (Form)

	$menu_settings = variable_get($form['#node']->type.'_menu_settings', array());
	$menu_parent = variable_get($form['#node']->type.'_menu_parent', NULL);

	unset($form['menu']['delete']);
	if ($menu_settings) {
		$menus = array_intersect_key(menu_get_menus(), $menu_settings);

		$options = inclind_ctm_menu_parent_options($menus, $form['menu_settings']['#item'], $menu_parent);

		$form['menu_settings']['parent']['#options'] = $options;

		$form['menu']['parent']['#options'] = $options;

		if (arg(1) == "add")
			$form['menu']['parent']['#default_value'] = $menu_parent;

		} else {
			unset($form['menu_settings']);
		}
	} elseif ($form_id == 'node_type_delete_confirm') {
		// Delete Content Type
		$form['#submit'][] = 'inclind_ctm_node_type_delete_confirm';
	}
}

/**
 *Content Type Form Submit - Save Menu Settings for Content Type. 
 */
function inclind_ctm_node_type_form_submit(&$form, $form_state) {
	$menu_settings = array_filter($form_state['values']['menu_settings']);
	$hide_menu_form = $form_state['values']['hide_menu_form'];

	$menu_parent = $form_state['values']['menu_parent'];

	if ($menu_settings) {
		variable_set($form_state['values']['type'].'_menu_settings', $menu_settings);
	} else {
		variable_del($form_state['values']['type'].'_menu_settings');
	}

	if ($hide_menu_form) {
		variable_set($form_state['values']['type'].'_hide_menu_form', true);
	} else {
		variable_del($form_state['values']['type'].'_hide_menu_form');
	}

	if ($menu_parent) {
		variable_set($form_state['values']['type'].'_menu_parent', $menu_parent);
	} else {
		variable_del($form_state['values']['type'].'_menu_parent');
	}
}

/**
 *Delete Content Type Form Submit - Delete Menu Settings Variable. 
 */
function inclind_ctm_node_type_delete_confirm(&$form, $form_state) {
	variable_del($form_state['values']['type'].'_menu_settings');
	variable_del($form_state['values']['type'].'_menu_parent');
}



function inclind_ctm_menu_parent_options($menus, $item, $root = null) {
  // The menu_links table can be practically any size and we need a way to
  // allow contrib modules to provide more scalable pattern choosers.
  // hook_form_alter is too late in itself because all the possible parents are
  // retrieved here, unless menu_override_parent_selector is set to TRUE.
  if (variable_get('menu_override_parent_selector', FALSE)) {
    return array();
  }

  // If the item has children, there is an added limit to the depth of valid parents.
  if (isset($item['parent_depth_limit'])) {
    $limit = $item['parent_depth_limit'];
  }
  else {
    $limit = _menu_parent_depth_limit($item);
  }

  $root = preg_replace('/.*:/i', '', $root);

  foreach ($menus as $menu_name => $title) {
    $tree = menu_tree_all_data($menu_name, NULL);
    $tree = find_menu_tree_root($tree, $root);

	remove_nonmenu_content_types($tree);

	if (!$root)
		$options[$menu_name .':0'] = '<'. $title .'>';

	if (!is_array($tree))
		return array();


    _menu_parents_recurse($tree, $menu_name, '--', $options, $item['mlid'], $limit);
  }

  return $options;
}


function remove_nonmenu_content_types(&$options) {
	if (!is_array($options))
		return;

	foreach ($options AS $menu_link => $title) {
		$mlid = end(explode(':', $menu_link));
		$menu_item = menu_link_load($mlid);
		$link_path = $menu_item['link_path'];
		if (strpos($link_path, 'node') >= 0) {
			$nid = end(explode('/', $link_path));			
			$node = node_load($nid);
			if(variable_get($node->type.'_hide_menu_form', 0))
				unset($options[$menu_link]);
		}
	}
}


function find_menu_tree_root($tree, $root = null) {
	if (!$tree)
		return;
	if (!$root)
		return $tree;

	if (!is_array($tree))
		return false;

	foreach ($tree as $menu_tree_id => $branch) {
		if (is_array($branch['link'])) {
			if ($branch['link']['mlid'] == $root) {
				return array($menu_tree_id => $branch);
			}
			$child_result = find_menu_tree_root($branch['below'], $root);
			if ($child_result) {
				return $child_result;
			}
		}
	}

	return false;	
}

/***
***/